// Generated by CoffeeScript 1.9.3
(function() {
  define(function(require, exports, module) {
    var AppInit, CodeInspection, DocumentManager, EditorManager, ExtensionUtils, FileSystem, FileUtils, NodeConnection, ProjectManager, compile, compileCoffee, connectToNodeModule, convertError, loadOptions, loadProjectConfig;
    ProjectManager = brackets.getModule('project/ProjectManager');
    ExtensionUtils = brackets.getModule('utils/ExtensionUtils');
    NodeConnection = brackets.getModule('utils/NodeConnection');
    AppInit = brackets.getModule('utils/AppInit');
    FileSystem = brackets.getModule('filesystem/FileSystem');
    FileUtils = brackets.getModule('file/FileUtils');
    CodeInspection = brackets.getModule('language/CodeInspection');
    DocumentManager = brackets.getModule('document/DocumentManager');
    EditorManager = brackets.getModule('editor/EditorManager');
    connectToNodeModule = function(moduleName) {
      var connection;
      connection = new NodeConnection();
      return connection.connect(true).pipe(function() {
        var path;
        path = ExtensionUtils.getModulePath(module, "node/" + moduleName);
        return connection.loadDomains([path], true);
      }).pipe(function() {
        return connection.domains[moduleName];
      });
    };
    loadProjectConfig = function(callback) {
      var file, projectPath;
      projectPath = ProjectManager.getProjectRoot().fullPath;
      file = FileSystem.getFileForPath(projectPath + ".brackets.json");
      return FileUtils.readAsText(file).then(callback, function() {
        file = FileSystem.getFileForPath(projectPath + "compile.json");
        return FileUtils.readAsText(file).then(callback, function() {
          return callback();
        });
      });
    };
    loadOptions = function(documentPath) {
      var deferred, projectPath;
      projectPath = ProjectManager.getProjectRoot().fullPath;
      deferred = $.Deferred();
      loadProjectConfig(function(text) {
        var defaults, err, file, i, j, len, options, ref;
        defaults = {
          kettle: [documentPath]
        };
        if (text == null) {
          deferred.resolve(defaults);
        }
        try {
          options = JSON.parse(text);
        } catch (_error) {
          err = _error;
        }
        if ((err == null) && options.kettle instanceof Array) {
          ref = options.kettle;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            file = ref[i];
            options.kettle[i] = projectPath + file;
          }
        }
        options = $.extend({}, defaults, options);
        return deferred.resolve(options);
      });
      return deferred;
    };
    compile = function(compiler, options) {
      var file, j, len, ref, tasks;
      tasks = [];
      ref = options.kettle;
      for (j = 0, len = ref.length; j < len; j++) {
        file = ref[j];
        tasks.push(compiler.compile(file, options));
      }
      return $.when.apply($, tasks);
    };
    convertError = function(error) {
      if (typeof error === 'string') {
        return {
          pos: {},
          message: error
        };
      }
      switch (error.code) {
        case 'EACCES':
        case 'ENOENT':
          return {
            pos: {},
            message: "Cannot open file '" + error.path + "'"
          };
        default:
          if (error.filename !== EditorManager.getCurrentFullEditor().document.file.name) {
            ({
              pos: {},
              message: "Error in file '" + error.filename + "' on line " + error.line + ": " + error.message,
              type: error.type
            });
          }
          return {
            pos: {
              line: error.line - 1,
              ch: error.index
            },
            message: error.message,
            type: error.type
          };
      }
    };
    compileCoffee = function(content, documentPath) {
      var connection, deferred, options;
      deferred = new $.Deferred();
      connection = connectToNodeModule('CoffeeCompiler');
      options = loadOptions(documentPath);
      $.when(connection, options).then((function(compiler, options) {
        return compile(compiler, options).then((function() {
          return deferred.resolve();
        }), function(error) {
          return deferred.resolve({
            errors: [convertError(error)]
          });
        });
      }), function(error) {
        return deferred.resolve({
          errors: [error]
        });
      });
      return deferred.promise();
    };
    return DocumentManager.on('documentSaved', function(event, document) {
      var err, isCoffeeScript, j, len, mode, ref;
      isCoffeeScript = false;
      ref = ['coffeescript', 'coffeescriptimproved'];
      for (j = 0, len = ref.length; j < len; j++) {
        mode = ref[j];
        if (document.language.getId() === mode) {
          isCoffeeScript = true;
          break;
        }
      }
      if (EditorManager.getCurrentFullEditor().document === document && isCoffeeScript) {
        try {
          return compileCoffee(document.getText(), document.file.fullPath);
        } catch (_error) {
          err = _error;
          return console.log(err.stack);
        }
      }
    });
  });

}).call(this);
